"use strict";(self.webpackChunksolidity_cbor_docs=self.webpackChunksolidity_cbor_docs||[]).push([[817],{7522:(t,e,a)=>{a.d(e,{Zo:()=>d,kt:()=>o});var n=a(9901);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function u(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function p(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var i=n.createContext({}),f=function(t){var e=n.useContext(i),a=e;return t&&(a="function"==typeof t?t(e):u(u({},e),t)),a},d=function(t){var e=f(t.components);return n.createElement(i.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},k=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,i=t.parentName,d=p(t,["components","mdxType","originalType","parentName"]),k=f(a),o=r,N=k["".concat(i,".").concat(o)]||k[o]||m[o]||l;return a?n.createElement(N,u(u({ref:e},d),{},{components:a})):n.createElement(N,u({ref:e},d))}));function o(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,u=new Array(l);u[0]=k;var p={};for(var i in e)hasOwnProperty.call(e,i)&&(p[i]=e[i]);p.originalType=t,p.mdxType="string"==typeof t?t:r,u[1]=p;for(var f=2;f<l;f++)u[f]=a[f];return n.createElement.apply(null,u)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},8613:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>d,contentTitle:()=>i,default:()=>o,frontMatter:()=>p,metadata:()=>f,toc:()=>m});var n=a(1911),r=a(2633),l=(a(9901),a(7522)),u=["components"],p={},i=void 0,f={unversionedId:"contract-docs/Buffer",id:"contract-docs/Buffer",title:"Buffer",description:"Buffer",source:"@site/docs/contract-docs/Buffer.md",sourceDirName:"contract-docs",slug:"/contract-docs/Buffer",permalink:"/solidity-cbor/docs/contract-docs/Buffer",editUrl:"https://github.com/owlprotocol/solidity-cbor/docs/contract-docs/Buffer.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Solidity Reference",permalink:"/solidity-cbor/docs/contract-docs/"},next:{title:"ByteParser",permalink:"/solidity-cbor/docs/contract-docs/ByteParser"}},d={},m=[{value:"Buffer",id:"buffer",level:2},{value:"buffer",id:"buffer-1",level:3},{value:"init",id:"init",level:3},{value:"fromBytes",id:"frombytes",level:3},{value:"resize",id:"resize",level:3},{value:"max",id:"max",level:3},{value:"truncate",id:"truncate",level:3},{value:"write",id:"write",level:3},{value:"append",id:"append",level:3},{value:"append",id:"append-1",level:3},{value:"writeUint8",id:"writeuint8",level:3},{value:"appendUint8",id:"appenduint8",level:3},{value:"write",id:"write-1",level:3},{value:"writeBytes20",id:"writebytes20",level:3},{value:"appendBytes20",id:"appendbytes20",level:3},{value:"appendBytes32",id:"appendbytes32",level:3},{value:"writeInt",id:"writeint",level:3},{value:"appendInt",id:"appendint",level:3}],k={toc:m};function o(t){var e=t.components,a=(0,r.Z)(t,u);return(0,l.kt)("wrapper",(0,n.Z)({},k,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"buffer"},"Buffer"),(0,l.kt)("p",null,"_A library for working with mutable byte buffers in Solidity."),(0,l.kt)("p",null,"Byte buffers are mutable and expandable, and provide a variety of primitives\nfor writing to them. At any time you can fetch a bytes object containing the\ncurrent contents of the buffer. The bytes object should not be stored between\noperations, as it may change due to resizing of the buffer._"),(0,l.kt)("h3",{id:"buffer-1"},"buffer"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"struct buffer {\n  bytes buf;\n  uint256 capacity;\n}\n")),(0,l.kt)("h3",{id:"init"},"init"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function init(struct Buffer.buffer buf, uint256 capacity) internal pure returns (struct Buffer.buffer)\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Initializes a buffer with an initial capacity.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"buf"),(0,l.kt)("td",{parentName:"tr",align:null},"struct Buffer.buffer"),(0,l.kt)("td",{parentName:"tr",align:null},"The buffer to initialize.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"capacity"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The number of bytes of space to allocate the buffer.")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"struct Buffer.buffer"),(0,l.kt)("td",{parentName:"tr",align:null},"The buffer, for chaining.")))),(0,l.kt)("h3",{id:"frombytes"},"fromBytes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function fromBytes(bytes b) internal pure returns (struct Buffer.buffer)\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Initializes a new buffer from an existing bytes object.\nChanges to the buffer may mutate the original value.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"b"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"The bytes object to initialize the buffer with.")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"struct Buffer.buffer"),(0,l.kt)("td",{parentName:"tr",align:null},"A new buffer.")))),(0,l.kt)("h3",{id:"resize"},"resize"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function resize(struct Buffer.buffer buf, uint256 capacity) private pure\n")),(0,l.kt)("h3",{id:"max"},"max"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function max(uint256 a, uint256 b) private pure returns (uint256)\n")),(0,l.kt)("h3",{id:"truncate"},"truncate"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function truncate(struct Buffer.buffer buf) internal pure returns (struct Buffer.buffer)\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Sets buffer length to 0.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"buf"),(0,l.kt)("td",{parentName:"tr",align:null},"struct Buffer.buffer"),(0,l.kt)("td",{parentName:"tr",align:null},"The buffer to truncate.")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"struct Buffer.buffer"),(0,l.kt)("td",{parentName:"tr",align:null},"The original buffer, for chaining..")))),(0,l.kt)("h3",{id:"write"},"write"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function write(struct Buffer.buffer buf, uint256 off, bytes data, uint256 len) internal pure returns (struct Buffer.buffer)\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Writes a byte string to a buffer. Resizes if doing so would exceed\nthe capacity of the buffer.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"buf"),(0,l.kt)("td",{parentName:"tr",align:null},"struct Buffer.buffer"),(0,l.kt)("td",{parentName:"tr",align:null},"The buffer to append to.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"off"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The start offset to write to.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"The data to append.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"len"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The number of bytes to copy.")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"struct Buffer.buffer"),(0,l.kt)("td",{parentName:"tr",align:null},"The original buffer, for chaining.")))),(0,l.kt)("h3",{id:"append"},"append"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function append(struct Buffer.buffer buf, bytes data, uint256 len) internal pure returns (struct Buffer.buffer)\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Appends a byte string to a buffer. Resizes if doing so would exceed\nthe capacity of the buffer.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"buf"),(0,l.kt)("td",{parentName:"tr",align:null},"struct Buffer.buffer"),(0,l.kt)("td",{parentName:"tr",align:null},"The buffer to append to.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"The data to append.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"len"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The number of bytes to copy.")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"struct Buffer.buffer"),(0,l.kt)("td",{parentName:"tr",align:null},"The original buffer, for chaining.")))),(0,l.kt)("h3",{id:"append-1"},"append"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function append(struct Buffer.buffer buf, bytes data) internal pure returns (struct Buffer.buffer)\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Appends a byte string to a buffer. Resizes if doing so would exceed\nthe capacity of the buffer.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"buf"),(0,l.kt)("td",{parentName:"tr",align:null},"struct Buffer.buffer"),(0,l.kt)("td",{parentName:"tr",align:null},"The buffer to append to.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"The data to append.")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"struct Buffer.buffer"),(0,l.kt)("td",{parentName:"tr",align:null},"The original buffer, for chaining.")))),(0,l.kt)("h3",{id:"writeuint8"},"writeUint8"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function writeUint8(struct Buffer.buffer buf, uint256 off, uint8 data) internal pure returns (struct Buffer.buffer)\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Writes a byte to the buffer. Resizes if doing so would exceed the\ncapacity of the buffer.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"buf"),(0,l.kt)("td",{parentName:"tr",align:null},"struct Buffer.buffer"),(0,l.kt)("td",{parentName:"tr",align:null},"The buffer to append to.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"off"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The offset to write the byte at.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"The data to append.")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"struct Buffer.buffer"),(0,l.kt)("td",{parentName:"tr",align:null},"The original buffer, for chaining.")))),(0,l.kt)("h3",{id:"appenduint8"},"appendUint8"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function appendUint8(struct Buffer.buffer buf, uint8 data) internal pure returns (struct Buffer.buffer)\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Appends a byte to the buffer. Resizes if doing so would exceed the\ncapacity of the buffer.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"buf"),(0,l.kt)("td",{parentName:"tr",align:null},"struct Buffer.buffer"),(0,l.kt)("td",{parentName:"tr",align:null},"The buffer to append to.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"The data to append.")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"struct Buffer.buffer"),(0,l.kt)("td",{parentName:"tr",align:null},"The original buffer, for chaining.")))),(0,l.kt)("h3",{id:"write-1"},"write"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function write(struct Buffer.buffer buf, uint256 off, bytes32 data, uint256 len) private pure returns (struct Buffer.buffer)\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Writes up to 32 bytes to the buffer. Resizes if doing so would\nexceed the capacity of the buffer.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"buf"),(0,l.kt)("td",{parentName:"tr",align:null},"struct Buffer.buffer"),(0,l.kt)("td",{parentName:"tr",align:null},"The buffer to append to.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"off"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The offset to write at.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"The data to append.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"len"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The number of bytes to write (left-aligned).")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"struct Buffer.buffer"),(0,l.kt)("td",{parentName:"tr",align:null},"The original buffer, for chaining.")))),(0,l.kt)("h3",{id:"writebytes20"},"writeBytes20"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function writeBytes20(struct Buffer.buffer buf, uint256 off, bytes20 data) internal pure returns (struct Buffer.buffer)\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Writes a bytes20 to the buffer. Resizes if doing so would exceed the\ncapacity of the buffer.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"buf"),(0,l.kt)("td",{parentName:"tr",align:null},"struct Buffer.buffer"),(0,l.kt)("td",{parentName:"tr",align:null},"The buffer to append to.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"off"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The offset to write at.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes20"),(0,l.kt)("td",{parentName:"tr",align:null},"The data to append.")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"struct Buffer.buffer"),(0,l.kt)("td",{parentName:"tr",align:null},"The original buffer, for chaining.")))),(0,l.kt)("h3",{id:"appendbytes20"},"appendBytes20"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function appendBytes20(struct Buffer.buffer buf, bytes20 data) internal pure returns (struct Buffer.buffer)\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Appends a bytes20 to the buffer. Resizes if doing so would exceed\nthe capacity of the buffer.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"buf"),(0,l.kt)("td",{parentName:"tr",align:null},"struct Buffer.buffer"),(0,l.kt)("td",{parentName:"tr",align:null},"The buffer to append to.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes20"),(0,l.kt)("td",{parentName:"tr",align:null},"The data to append.")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"struct Buffer.buffer"),(0,l.kt)("td",{parentName:"tr",align:null},"The original buffer, for chhaining.")))),(0,l.kt)("h3",{id:"appendbytes32"},"appendBytes32"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function appendBytes32(struct Buffer.buffer buf, bytes32 data) internal pure returns (struct Buffer.buffer)\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Appends a bytes32 to the buffer. Resizes if doing so would exceed\nthe capacity of the buffer.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"buf"),(0,l.kt)("td",{parentName:"tr",align:null},"struct Buffer.buffer"),(0,l.kt)("td",{parentName:"tr",align:null},"The buffer to append to.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"The data to append.")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"struct Buffer.buffer"),(0,l.kt)("td",{parentName:"tr",align:null},"The original buffer, for chaining.")))),(0,l.kt)("h3",{id:"writeint"},"writeInt"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function writeInt(struct Buffer.buffer buf, uint256 off, uint256 data, uint256 len) private pure returns (struct Buffer.buffer)\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Writes an integer to the buffer. Resizes if doing so would exceed\nthe capacity of the buffer.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"buf"),(0,l.kt)("td",{parentName:"tr",align:null},"struct Buffer.buffer"),(0,l.kt)("td",{parentName:"tr",align:null},"The buffer to append to.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"off"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The offset to write at.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The data to append.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"len"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The number of bytes to write (right-aligned).")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"struct Buffer.buffer"),(0,l.kt)("td",{parentName:"tr",align:null},"The original buffer, for chaining.")))),(0,l.kt)("h3",{id:"appendint"},"appendInt"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function appendInt(struct Buffer.buffer buf, uint256 data, uint256 len) internal pure returns (struct Buffer.buffer)\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Appends a byte to the end of the buffer. Resizes if doing so would\nexceed the capacity of the buffer.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"buf"),(0,l.kt)("td",{parentName:"tr",align:null},"struct Buffer.buffer"),(0,l.kt)("td",{parentName:"tr",align:null},"The buffer to append to.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The data to append.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"len"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"struct Buffer.buffer"),(0,l.kt)("td",{parentName:"tr",align:null},"The original buffer.")))))}o.isMDXComponent=!0}}]);