"use strict";(self.webpackChunksolidity_cbor_docs=self.webpackChunksolidity_cbor_docs||[]).push([[651],{7522:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(9901);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(r),m=a,y=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return r?n.createElement(y,i(i({ref:t},p),{},{components:r})):n.createElement(y,i({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},3004:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var n=r(1911),a=r(2633),o=(r(9901),r(7522)),i=["components"],l={sidebar_position:2,slug:"/quickstart"},c="Quickstart",s={unversionedId:"quickstart",id:"quickstart",title:"Quickstart",description:"Looking for some example code to jump right in? This is the right place.",source:"@site/docs/quickstart.md",sourceDirName:".",slug:"/quickstart",permalink:"/solidity-cbor/docs/quickstart",editUrl:"https://github.com/owlprotocol/solidity-cbor/docs/quickstart.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,slug:"/quickstart"},sidebar:"tutorialSidebar",previous:{title:"Welcome",permalink:"/solidity-cbor/docs/"},next:{title:"Solidity Reference",permalink:"/solidity-cbor/docs/contract-docs/"}},p={},d=[{value:"Parsing Results",id:"parsing-results",level:2},{value:"Decoding Mappings",id:"decoding-mappings",level:2},{value:"Decoding Arrays",id:"decoding-arrays",level:2},{value:"Contract Example",id:"contract-example",level:2},{value:"Full Reference",id:"full-reference",level:2}],u={toc:d};function m(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"quickstart"},"Quickstart"),(0,o.kt)("p",null,"Looking for some example code to jump right in? This is the right place."),(0,o.kt)("p",null,"First you'll want to import the library into your solidity contract:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C++"},'import "@owlprotocol/solidity-cbor/CBORDecoding.sol";\n')),(0,o.kt)("h2",{id:"parsing-results"},"Parsing Results"),(0,o.kt)("p",null,"All parsed values will be returned in the form of ",(0,o.kt)("inlineCode",{parentName:"p"},"bytes memory"),". You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"ByteParser.sol")," helper functions in order to parse these into native Solidity types:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C++"},'import "@owlprotocol/solidity-cbor/ByteParser.sol";\n')),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"./contract-docs/ByteParser"},"this reference")," for a list of useful parsing functions."),(0,o.kt)("h2",{id:"decoding-mappings"},"Decoding Mappings"),(0,o.kt)("p",null,"Since Solidity has no concept of in-memory hashes, we leverage 2d-arrays instead. The first item in a pair is a key and the second is the value."),(0,o.kt)("p",null,"Suppose your mapping looks like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'> const mapping = { "1": "2", "3": "4", "5": "6", "7": "8" };\n> const encodedMapping = cbor.encode(mapping);\n> "0x" + encodedMapping.toString("hex");\n// This cbor is what\'s passed to the library\n\'0xa461316132613361346135613661376138\'\n')),(0,o.kt)("p",null,"If you're retreiving two or less values from a mapping, it's less expensive (gas) to call ",(0,o.kt)("inlineCode",{parentName:"p"},"decodeMappingGetValue"),":"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"./contract-docs/CBORDecoding#decodeMappingGetValue"},(0,o.kt)("inlineCode",{parentName:"a"},'CBORDecoding.decodeMappingGetValue(<[bytes memory] encodedMapping>, <[bytes memory] "7">)'))," will return the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C++"},'0x38 // This is the bytes (UTF-8) representation of "8"\n')),(0,o.kt)("p",null,"If you need more than two values from a mapping, it's better to decode the entire mapping with ",(0,o.kt)("inlineCode",{parentName:"p"},"decodeMapping")," and index elements individually:"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"./contract-docs/CBORDecoding#decodeMapping"},(0,o.kt)("inlineCode",{parentName:"a"},"CBORDecoding.decodeMapping(<[bytes memory] encodedMapping>);"))," will return the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C++"},'[\n// [key[0], value[1]]\n    ["0x31","0x32"], // item [0]\n    ["0x33","0x34"], // item [1]\n    ["0x35","0x36"], // item [2]\n    ["0x37","0x38"]  // item [3]\n]\n')),(0,o.kt)("h2",{id:"decoding-arrays"},"Decoding Arrays"),(0,o.kt)("p",null,"Suppose your array looks like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'> const array = [1, 2, 3, 4, 5, 6, 7, 8];\n> const encodedArray = cbor.encode(array);\n> "0x" + encodedArray.toString("hex");\n// This cbor is what\'s passed to the library\n\'0x880102030405060708\'\n')),(0,o.kt)("p",null,"If you're retreiving two or less values from an array, it's less expensive (gas) to call ",(0,o.kt)("inlineCode",{parentName:"p"},"decodeArrayGetItem"),":"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"./contract-docs/CBORDecoding#decodeArrayGetItem"},(0,o.kt)("inlineCode",{parentName:"a"},"CBORDecoding.decodeArrayGetItem(<[bytes memory] encodedArray>, [uint64] 2)"))," will return the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C++"},"0x03 // This is the bytes representation of array[2]\n")),(0,o.kt)("p",null,"If you need more than two values from an array, it's better to decode the entire array with ",(0,o.kt)("inlineCode",{parentName:"p"},"decodeArray")," and index elements individually:"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"./contract-docs/CBORDecoding#decodeArray"},(0,o.kt)("inlineCode",{parentName:"a"},"CBORDecoding.decodeArray(<[bytes memory] encodedArray>);"))," will return the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C++"},'["0x01","0x02","0x03","0x04","0x05","0x06","0x07","0x08"]\n')),(0,o.kt)("p",null,"If you need to search an array for the index of an item, you can also do that with ",(0,o.kt)("inlineCode",{parentName:"p"},"decodeArrayGetIndex"),":"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"./contract-docs/CBORDecoding#decodeArrayGetItem"},(0,o.kt)("inlineCode",{parentName:"a"},'CBORDecoding.decodeArrayGetIndex(<[bytes memory] encodedArray>, <[bytes memory] "0x03">)'))," will return the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C++"},"2\n")),(0,o.kt)("h2",{id:"contract-example"},"Contract Example"),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/owlprotocol/react-snake-game/blob/develop/solidity/contracts/SnakeGameRewards.sol"},"this contract")," for a real contract example."),(0,o.kt)("h2",{id:"full-reference"},"Full Reference"),(0,o.kt)("p",null,"The full reference of decoding methods can be found ",(0,o.kt)("a",{parentName:"p",href:"./contract-docs/CBORDecoding#CBORDecoding"},"here"),"."))}m.isMDXComponent=!0}}]);